// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - extends Clerk user with additional data
model User {
  id                String             @id @default(cuid())
  clerkId           String             @unique
  email             String             @unique
  username          String?            @unique
  bio               String?
  avatarUrl         String?
  xp                Int                @default(0)
  level             Int                @default(1)
  currentStreak     Int                @default(0)
  longestStreak     Int                @default(0)
  lastActivityDate  DateTime?
  learningMinutes   Int                @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  // Relations
  enrollments       Enrollment[]
  achievements      UserAchievement[]
  progress          Progress[]
  quizAttempts      QuizAttempt[]
  friendRequestsSent   FriendRequest[]  @relation("FriendRequestsSent")
  friendRequestsReceived FriendRequest[] @relation("FriendRequestsReceived")
  friendsInitiated  Friendship[]       @relation("FriendsInitiated")
  friendsReceived   Friendship[]       @relation("FriendsReceived")
  activityFeed      Activity[]
  studyGroups       StudyGroupMember[]
  messages          Message[]
  certificates      Certificate[]
  
  @@index([clerkId])
  @@index([username])
}

// Course model
model Course {
  id                String             @id @default(cuid())
  title             String
  description       String
  thumbnail         String?
  difficulty        Difficulty         @default(BEGINNER)
  estimatedHours    Float
  category          String
  tags              String[]
  isPublished       Boolean            @default(false)
  price             Float              @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  // Relations
  modules           Module[]
  enrollments       Enrollment[]
  certificates      Certificate[]
  
  @@index([category])
  @@index([isPublished])
}

// Module model
model Module {
  id                String             @id @default(cuid())
  courseId          String
  title             String
  description       String?
  orderIndex        Int
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  // Relations
  course            Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons           Lesson[]
  
  @@index([courseId])
}

// Lesson model
model Lesson {
  id                String             @id @default(cuid())
  moduleId          String
  title             String
  description       String?
  content           Json               // Rich text content
  videoUrl          String?
  duration          Int?               // in minutes
  orderIndex        Int
  xpReward          Int                @default(10)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  // Relations
  module            Module             @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  activities        Activity[]
  progress          Progress[]
  quizzes           Quiz[]
  
  @@index([moduleId])
}

// Quiz model
model Quiz {
  id                String             @id @default(cuid())
  lessonId          String?
  title             String
  description       String?
  passingScore      Float              @default(70)
  maxAttempts       Int                @default(3)
  timeLimit         Int?               // in minutes
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  // Relations
  lesson            Lesson?            @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questions         Question[]
  attempts          QuizAttempt[]
  
  @@index([lessonId])
}

// Question model
model Question {
  id                String             @id @default(cuid())
  quizId            String
  type              QuestionType
  question          String
  options           Json?              // For multiple choice
  correctAnswer     Json
  explanation       String?
  points            Int                @default(1)
  orderIndex        Int
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  // Relations
  quiz              Quiz               @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  @@index([quizId])
}

// Quiz Attempt model
model QuizAttempt {
  id                String             @id @default(cuid())
  userId            String
  quizId            String
  score             Float
  answers           Json
  completedAt       DateTime           @default(now())
  timeSpent         Int?               // in seconds
  
  // Relations
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz              Quiz               @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([quizId])
}

// Enrollment model
model Enrollment {
  id                String             @id @default(cuid())
  userId            String
  courseId          String
  status            EnrollmentStatus   @default(ACTIVE)
  progress          Float              @default(0)
  enrolledAt        DateTime           @default(now())
  completedAt       DateTime?
  
  // Relations
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

// Progress model
model Progress {
  id                String             @id @default(cuid())
  userId            String
  lessonId          String
  completed         Boolean            @default(false)
  completedAt       DateTime?
  timeSpent         Int                @default(0) // in seconds
  lastAccessedAt    DateTime           @default(now())
  
  // Relations
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson            Lesson             @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
}

// Achievement model
model Achievement {
  id                String             @id @default(cuid())
  name              String
  description       String
  icon              String
  category          AchievementCategory
  requirement       Json               // Criteria for earning
  xpReward          Int                @default(50)
  createdAt         DateTime           @default(now())
  
  // Relations
  users             UserAchievement[]
  
  @@index([category])
}

// User Achievement model
model UserAchievement {
  id                String             @id @default(cuid())
  userId            String
  achievementId     String
  earnedAt          DateTime           @default(now())
  
  // Relations
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement       Achievement        @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
  @@index([userId])
  @@index([achievementId])
}

// Friend Request model
model FriendRequest {
  id                String             @id @default(cuid())
  senderId          String
  receiverId        String
  status            FriendRequestStatus @default(PENDING)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  // Relations
  sender            User               @relation("FriendRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)
  receiver          User               @relation("FriendRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  
  @@unique([senderId, receiverId])
  @@index([senderId])
  @@index([receiverId])
}

// Friendship model
model Friendship {
  id                String             @id @default(cuid())
  userId            String
  friendId          String
  createdAt         DateTime           @default(now())
  
  // Relations
  user              User               @relation("FriendsInitiated", fields: [userId], references: [id], onDelete: Cascade)
  friend            User               @relation("FriendsReceived", fields: [friendId], references: [id], onDelete: Cascade)
  
  @@unique([userId, friendId])
  @@index([userId])
  @@index([friendId])
}

// Activity Feed model
model Activity {
  id                String             @id @default(cuid())
  userId            String
  lessonId          String?
  type              ActivityType
  description       String
  metadata          Json?
  createdAt         DateTime           @default(now())
  
  // Relations
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson            Lesson?            @relation(fields: [lessonId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([createdAt])
}

// Study Group model
model StudyGroup {
  id                String             @id @default(cuid())
  name              String
  description       String?
  maxMembers        Int                @default(10)
  isPublic          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  // Relations
  members           StudyGroupMember[]
  messages          Message[]
}

// Study Group Member model
model StudyGroupMember {
  id                String             @id @default(cuid())
  userId            String
  groupId           String
  role              GroupRole          @default(MEMBER)
  joinedAt          DateTime           @default(now())
  
  // Relations
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  group             StudyGroup         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  @@unique([userId, groupId])
  @@index([userId])
  @@index([groupId])
}

// Message model (for study groups)
model Message {
  id                String             @id @default(cuid())
  userId            String
  groupId           String
  content           String
  createdAt         DateTime           @default(now())
  
  // Relations
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  group             StudyGroup         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  @@index([groupId])
  @@index([createdAt])
}

// Certificate model
model Certificate {
  id                String             @id @default(cuid())
  userId            String
  courseId          String
  certificateUrl    String
  issuedAt          DateTime           @default(now())
  
  // Relations
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

// Enums
enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_BLANK
  DRAG_DROP
  SHORT_ANSWER
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  PAUSED
  DROPPED
}

enum AchievementCategory {
  PROGRESS
  SKILL
  SOCIAL
  TIME
  STREAK
  SPECIAL
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ActivityType {
  COURSE_ENROLLED
  LESSON_COMPLETED
  QUIZ_PASSED
  ACHIEVEMENT_EARNED
  STREAK_MILESTONE
  LEVEL_UP
  FRIEND_ADDED
}

enum GroupRole {
  ADMIN
  MODERATOR
  MEMBER
}