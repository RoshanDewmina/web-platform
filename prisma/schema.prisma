// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - extends Clerk user with additional data
model User {
  id               String    @id @default(cuid())
  clerkId          String    @unique
  email            String    @unique
  username         String?   @unique
  bio              String?
  avatarUrl        String?
  xp               Int       @default(0)
  level            Int       @default(1)
  currentStreak    Int       @default(0)
  longestStreak    Int       @default(0)
  lastActivityDate DateTime?
  learningMinutes  Int       @default(0)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  enrollments            Enrollment[]
  achievements           UserAchievement[]
  progress               Progress[]
  quizAttempts           QuizAttempt[]
  friendRequestsSent     FriendRequest[]    @relation("FriendRequestsSent")
  friendRequestsReceived FriendRequest[]    @relation("FriendRequestsReceived")
  friendsInitiated       Friendship[]       @relation("FriendsInitiated")
  friendsReceived        Friendship[]       @relation("FriendsReceived")
  activityFeed           Activity[]
  studyGroups            StudyGroupMember[]
  messages               Message[]
  certificates           Certificate[]
  courseSessions         CourseSession[]
  slideViews             SlideView[]
  interactionEvents      InteractionEvent[]
  courseAnalytics        CourseAnalytics[]

  @@index([clerkId])
  @@index([username])
}

// Course model
model Course {
  id                 String     @id @default(cuid())
  title              String
  description        String
  thumbnail          String?
  difficulty         Difficulty @default(BEGINNER)
  estimatedHours     Float
  category           String
  tags               String[]
  isPublished        Boolean    @default(false)
  visibility         Visibility @default(PUBLIC)
  scheduledPublishAt DateTime?
  accessControl      Json?
  enrollmentLimit    Int?
  price              Float      @default(0)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  // Relations
  modules          Module[]
  enrollments      Enrollment[]
  certificates     Certificate[]
  versions         CourseVersion[]
  approvalRequests ApprovalRequest[]
  courseSessions   CourseSession[]
  courseAnalytics  CourseAnalytics[]

  @@index([category])
  @@index([isPublished])
}

// Module model
model Module {
  id          String   @id @default(cuid())
  courseId    String
  title       String
  description String?
  orderIndex  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]

  @@index([courseId])
}

// Lesson model
model Lesson {
  id          String   @id @default(cuid())
  moduleId    String
  title       String
  description String?
  content     Json // Rich text content
  videoUrl    String?
  duration    Int? // in minutes
  orderIndex  Int
  xpReward    Int      @default(10)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  module     Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  slides     Slide[]
  activities Activity[]
  progress   Progress[]
  quizzes    Quiz[]

  @@index([moduleId])
}

// Slide model - Enhanced with grid layout
model Slide {
  id         String  @id @default(cuid())
  lessonId   String
  title      String
  notes      String?
  template   String?
  orderIndex Int

  // Grid layout data
  gridLayout Json? // Contains elements with x,y,w,h positions
  theme      Json? // Slide-specific theme overrides
  transition String? @default("none")
  duration   Int? // Auto-advance in seconds
  background Json? // Background settings

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  lesson Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  blocks ContentBlock[]

  @@index([lessonId])
}

// Content Block model
model ContentBlock {
  id         String   @id @default(cuid())
  slideId    String
  type       String
  content    Json
  settings   Json?
  orderIndex Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  slide Slide @relation(fields: [slideId], references: [id], onDelete: Cascade)

  @@index([slideId])
}

// Template model for slides/content structures
model Template {
  id             String   @id @default(cuid())
  name           String
  description    String?
  previewImage   String?
  category       String
  blockStructure Json
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([category])
}

// Quiz model
model Quiz {
  id           String   @id @default(cuid())
  lessonId     String?
  title        String
  description  String?
  passingScore Float    @default(70)
  maxAttempts  Int      @default(3)
  timeLimit    Int? // in minutes
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  lesson    Lesson?       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questions Question[]
  attempts  QuizAttempt[]

  @@index([lessonId])
}

// Question model
model Question {
  id            String       @id @default(cuid())
  quizId        String
  type          QuestionType
  question      String
  options       Json? // For multiple choice
  correctAnswer Json
  explanation   String?
  points        Int          @default(1)
  orderIndex    Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([quizId])
}

// Quiz Attempt model
model QuizAttempt {
  id          String   @id @default(cuid())
  userId      String
  quizId      String
  score       Float
  answers     Json
  completedAt DateTime @default(now())
  timeSpent   Int? // in seconds

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([quizId])
}

// Enrollment model
model Enrollment {
  id          String           @id @default(cuid())
  userId      String
  courseId    String
  status      EnrollmentStatus @default(ACTIVE)
  progress    Float            @default(0)
  enrolledAt  DateTime         @default(now())
  completedAt DateTime?

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

// Progress model
model Progress {
  id             String    @id @default(cuid())
  userId         String
  lessonId       String
  completed      Boolean   @default(false)
  completedAt    DateTime?
  timeSpent      Int       @default(0) // in seconds
  lastAccessedAt DateTime  @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
}

// Achievement model
model Achievement {
  id          String              @id @default(cuid())
  name        String
  description String
  icon        String
  category    AchievementCategory
  requirement Json // Criteria for earning
  xpReward    Int                 @default(50)
  createdAt   DateTime            @default(now())

  // Relations
  users UserAchievement[]

  @@index([category])
}

// User Achievement model
model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  earnedAt      DateTime @default(now())

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
  @@index([achievementId])
}

// Friend Request model
model FriendRequest {
  id         String              @id @default(cuid())
  senderId   String
  receiverId String
  status     FriendRequestStatus @default(PENDING)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  // Relations
  sender   User @relation("FriendRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("FriendRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@index([senderId])
  @@index([receiverId])
}

// Friendship model
model Friendship {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  createdAt DateTime @default(now())

  // Relations
  user   User @relation("FriendsInitiated", fields: [userId], references: [id], onDelete: Cascade)
  friend User @relation("FriendsReceived", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@index([userId])
  @@index([friendId])
}

// Activity Feed model
model Activity {
  id          String       @id @default(cuid())
  userId      String
  lessonId    String?
  type        ActivityType
  description String
  metadata    Json?
  createdAt   DateTime     @default(now())

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson? @relation(fields: [lessonId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([createdAt])
}

// Study Group model
model StudyGroup {
  id          String   @id @default(cuid())
  name        String
  description String?
  maxMembers  Int      @default(10)
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members  StudyGroupMember[]
  messages Message[]
}

// Study Group Member model
model StudyGroupMember {
  id       String    @id @default(cuid())
  userId   String
  groupId  String
  role     GroupRole @default(MEMBER)
  joinedAt DateTime  @default(now())

  // Relations
  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  group StudyGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@index([userId])
  @@index([groupId])
}

// Message model (for study groups)
model Message {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  content   String
  createdAt DateTime @default(now())

  // Relations
  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  group StudyGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([groupId])
  @@index([createdAt])
}

// Certificate model
model Certificate {
  id             String   @id @default(cuid())
  userId         String
  courseId       String
  certificateUrl String
  issuedAt       DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

// Enums
enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum Visibility {
  PUBLIC
  PRIVATE
  RESTRICTED
}

// Version history for courses
model CourseVersion {
  id        String        @id @default(cuid())
  courseId  String
  version   Int
  label     String?
  data      Json
  createdBy String?
  createdAt DateTime      @default(now())
  status    VersionStatus @default(DRAFT)

  course    Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  approvals ApprovalRequest[]

  @@unique([courseId, version])
  @@index([courseId])
}

enum VersionStatus {
  DRAFT
  PROPOSED
  APPROVED
  REJECTED
}

// Approval workflow for publishing
model ApprovalRequest {
  id          String         @id @default(cuid())
  courseId    String
  versionId   String
  status      ApprovalStatus @default(PENDING)
  submittedBy String?
  reviewedBy  String?
  reviewedAt  DateTime?
  notes       String?
  createdAt   DateTime       @default(now())

  course  Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  version CourseVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([versionId])
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_BLANK
  DRAG_DROP
  SHORT_ANSWER
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  PAUSED
  DROPPED
}

enum AchievementCategory {
  PROGRESS
  SKILL
  SOCIAL
  TIME
  STREAK
  SPECIAL
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ActivityType {
  COURSE_ENROLLED
  LESSON_COMPLETED
  QUIZ_PASSED
  ACHIEVEMENT_EARNED
  STREAK_MILESTONE
  LEVEL_UP
  FRIEND_ADDED
}

enum GroupRole {
  ADMIN
  MODERATOR
  MEMBER
}

// ==================== Enhanced Asset Management ====================

// Enhanced Asset model with better metadata
model EnhancedAsset {
  id           String  @id @default(cuid())
  courseId     String?
  filename     String
  originalName String
  mimeType     String
  fileSize     Int
  url          String
  thumbnailUrl String?
  sha256Hash   String  @unique

  // Enhanced metadata
  width      Int?
  height     Int?
  duration   Int? // For video/audio in seconds
  transcript String? // For searchability
  altText    String?

  // Organization
  tags     String[]
  folderId String?

  // Vector embeddings for semantic search
  embedding Float[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?

  // Relations
  folder AssetFolder? @relation(fields: [folderId], references: [id], onDelete: SetNull)

  @@index([courseId])
  @@index([sha256Hash])
  @@index([folderId])
}

// Asset folders for organization
model AssetFolder {
  id          String   @id @default(cuid())
  courseId    String?
  name        String
  parentId    String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent   AssetFolder?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children AssetFolder[]   @relation("FolderHierarchy")
  assets   EnhancedAsset[]

  @@index([courseId])
  @@index([parentId])
}

// ==================== AI Command System ====================

// AI Commands for audit and replay
model AICommand {
  id         String    @id @default(cuid())
  courseId   String?
  slideId    String?
  type       String // Command type
  parameters Json // Command parameters
  status     String    @default("pending") // pending, executing, completed, failed
  result     Json? // Command result
  error      String? // Error message if failed
  userId     String?
  createdAt  DateTime  @default(now())
  executedAt DateTime?

  @@index([courseId])
  @@index([slideId])
  @@index([type])
  @@index([status])
}

// Custom components created by users
model CustomComponent {
  id           String   @id @default(cuid())
  name         String
  description  String?
  code         String   @db.Text
  compiledCode String?  @db.Text
  dependencies String[]
  propSchema   Json
  defaultProps Json
  defaultSize  Json // {w, h}
  minSize      Json // {w, h}
  maxSize      Json? // {w, h}
  category     String   @default("custom")
  isPublic     Boolean  @default(false)
  tags         String[] @default([])
  version      Int      @default(1)
  usageCount   Int      @default(0)
  rating       Float    @default(0)
  isVerified   Boolean  @default(false)
  createdBy    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([createdBy])
  @@index([isPublic])
  @@index([category])
}

// ==================== Comprehensive Progress Tracking ====================

// Course Session - tracks each time a user starts/resumes a course
model CourseSession {
  id               String    @id @default(cuid())
  userId           String
  courseId         String
  startedAt        DateTime  @default(now())
  endedAt          DateTime?
  totalDuration    Int       @default(0) // in seconds
  completedSlides  Int       @default(0)
  totalSlides      Int       @default(0)
  progressSnapshot Json? // Snapshot of progress at session end
  deviceInfo       Json? // Browser, OS, screen size, etc.
  ipAddress        String?
  
  // Relations
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  course           Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  slideViews       SlideView[]
  interactionEvents InteractionEvent[]
  
  @@index([userId])
  @@index([courseId])
  @@index([startedAt])
}

// Slide View - tracks every slide view
model SlideView {
  id             String    @id @default(cuid())
  userId         String
  sessionId      String
  slideId        String
  moduleId       String
  subModuleId    String
  viewedAt       DateTime  @default(now())
  timeSpent      Int       @default(0) // in seconds
  scrollDepth    Float     @default(0) // Percentage of slide scrolled
  completed      Boolean   @default(false)
  exitReason     String? // navigation, timeout, close, etc.
  
  // Relations
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  session CourseSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([sessionId])
  @@index([slideId])
  @@index([viewedAt])
}

// Interaction Event - tracks all user interactions
model InteractionEvent {
  id          String    @id @default(cuid())
  userId      String
  sessionId   String
  slideId     String?
  eventType   String // click, form_submit, quiz_answer, video_play, etc.
  eventName   String // specific event identifier
  eventData   Json // Event-specific data
  timestamp   DateTime  @default(now())
  
  // Relations
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  session CourseSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([sessionId])
  @@index([eventType])
  @@index([timestamp])
}

// Course Analytics - aggregated analytics per user per course
model CourseAnalytics {
  id                    String    @id @default(cuid())
  userId                String
  courseId              String
  totalSessions         Int       @default(0)
  totalTimeSpent        Int       @default(0) // in seconds
  averageSessionLength  Int       @default(0) // in seconds
  completionRate        Float     @default(0) // 0-100
  lastAccessedAt        DateTime?
  firstAccessedAt       DateTime?
  completedAt           DateTime?
  totalInteractions     Int       @default(0)
  quizAverageScore      Float?
  preferredTimeOfDay    String? // morning, afternoon, evening, night
  mostActiveDay         String? // Monday, Tuesday, etc.
  strugglingTopics      Json[] // Array of topics with low completion/scores
  strongTopics          Json[] // Array of topics with high completion/scores
  
  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}
